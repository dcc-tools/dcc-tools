#!/usr/bin/env bash

# Note: dcc-tools will be compilant with
# XDG Base Directory Specification in the future

# Current implementation will hardcode default paths

##
## Important paths
##
BIN_DIR="$HOME/.local/bin"
SRC_DIR="$HOME/.local/src"

TOOLS_DIR="${SRC_DIR}/dcc-tools"
BUCKETS_DIR="${TOOLS_DIR}/buckets"

##
## Important programs with flags
##
git_cmd="git -C $TOOLS_DIR"

function myhelp_no_more_info() {

    printf -- "No hay más ayuda disponible.\n"

}

function myhelp_bucket() {

cat << EOF
Administra repositorios externos

  add <name> <git-url> Añade un repositorio externo
  remove <name>        Quita un repositorio externo

Ejemplos:
Añadir el bucket 'extra'
  $ dcc-tools bucket add extra https://github.com/tvillega/dcc-tools-extra.git

Quitar el bucket 'extra'
  $ dcc-tools bucket remove extra
EOF

}

function myhelp_git() {

cat << EOF
Software de Control de Versiones

Para facilitar el almacenamiento y distribución de dcc-tools se
utiliza GitHub para almacenar su código y el de sus programas

Ejemplos:
Ver el estado actual del repositorio
  $ dcc-tools git status

Actualizar el repositorio
  $ dcc-tools git pull
EOF

}

function myhelp_install() {

cat << EOF
Instala localmente un programa

  <programa>          Programa específico de Anakena
  <bucket>/<programa> Programa de un bucket externo

Ejemplos:
Instalar el programa 'imprime'
  $ dcc-tools install imprime

Instalar el programa 'zola'
  $ dcc-tools install extra/zola
EOF

}

function myhelp_list() {

cat << EOF
Lista los programas instalados por dcc-tools

Ejemplos:
  $ dcc-tools list
EOF

}

function myhelp_remove() {

cat << EOF
Quita un programa instalado localmente

  <program> Programa a quitar

Ejemplos:
Quitar el programa 'imprime'
  $ dcc-tools remove imprime

Quitar el programa 'zola'
  $ dcc-tools remove zola

No incluir el prefijo del bucket, se encontrará
automáticamente siguiendo la ruta del symlink
EOF

}

function myhelp_update() {

cat << EOF
Actualiza dcc-tools

Sólo actualiza las herramientas creadas
específicamente para Anakena

Ejemplos:
Actualizar sólo el repositorio principal
  $ dcc-tools update

Esto es equivalente a realizar
  $ dcc-tools git pull
EOF

}

function myhelp() {

    local tool="$1"

    if [[ -n $tool ]] ; then

        case "$tool" in
            bucket)
                myhelp_bucket
                exit
                ;;
            git)
                myhelp_git
                exit
                ;;
            install)
                myhelp_install
                exit
                ;;
            list)
                myhelp_list
                exit
                ;;
            remove)
                myhelp_remove
                exit
                ;;
            update)
                myhelp_update
                exit
                ;;
            *)
                myhelp_no_more_info
                exit
                ;;
        esac
    fi

    printf -- "Administrador de paquetes locales para el servidor del dcc\n"
    printf -- "\n"
    printf -- "  bucket      Administra repositorios externos\n"
    printf -- "  git         Ejecuta git dentro del repositorio principal\n"
    printf -- "  help        Imprime esta ayuda\n"
    printf -- "  install     Instala un programa\n"
    printf -- "  list        Lista los programas instalados\n"
    printf -- "  remove      Quita un programa\n"
    printf -- "  update      Actualiza dcc-tools\n"
    printf -- "\n"
    printf -- "Vea 'dcc-tools help <command>' para más información del subcomando.\n"

}

###
### AUXILIAR
###

function aux_tool_exists() {

    local tool="$1"
    local bucket="$2"

    if [[ "$bucket" == "main" ]] ; then
        this_tool_dir="${TOOLS_DIR}"

    else
        this_tool_dir="${BUCKETS_DIR}/${bucket}"
    fi

    if [[ -f "${this_tool_dir}/${tool}" || -f "${this_tool_dir}/${tool}-fetch"]] ; then
        return 0

    else
        return 1
    fi

}

function aux_bucket_exists() {

    local bucket="$1"

    if [[ -d "${BUCKETS_DIR}/${bucket}" ]] ; then
        return 0

    else
        return 1
    fi

}

###
### TOOLS
###

##
## dcc-tools list
##
function tools_list() {

    readarray -t arraySymlink < <(find "$BIN_DIR" -type l)

    for i in "${arraySymlink[@]}"; do

        symlink_target=$(readlink "$i")
        target_basedir=$(dirname "$symlink_target")

        # This only handles native tools for DCC
        # that are located inside $TOOLS_DIR
        # e.g. imprimir, siitoweb

        if [[ "${target_basedir}" == "$TOOLS_DIR" ]] ; then
            printf -- "%s\n" "$(basename "$i")"
        fi

        # This only handles tools from buckets
        # that are located inside $BUCKETS_DIR

        # It needs to strip the base name two time
        # $HOME/.local/src/dcc-tools/buckets/bucket_dir/program_dir
        # -- Already stripped --------------------------^^^^^^^^^^^
        # $HOME/.local/src/dcc-tools/buckets/bucket_dir
        target_basedir=$(dirname "$target_basedir")
        # $HOME/.local/src/dcc-tools/buckets

        if [[ "${target_basedir}" == "$BUCKETS_DIR" ]] ; then
            printf -- "%s\n" "$(basename "$i")"
        fi

    done

}

##
## dcc-tools install <tool>
##
function tools_install() {

    local tool_name="$1"

    # There are two possible input strings:
    #    1. zola -- in which 'zola' will be returned
    #    2. extra/zola -- in which 'extra' will be returned
    # This will always grab the first cut field
    # and try to match it to a known bucket from $BUCKETS_DIR
    # shellcheck disable=SC2155
    local bucket_candidate="$(printf -- '%s' "$tool_name" | cut -f1 -d '/')"

    readarray -t arrayBucket < <(dcc-tools bucket list)

    local bucket=""
    for i in "${arrayBucket[@]}"; do
        if [[ "$i" == "$bucket_candidate" ]] ; then
            bucket="$bucket_candidate"
            tool_name="$(printf -- '%s' "$tool_name" | cut -f2 -d '/')"
            break
        fi
    done

    if [[ -n "$bucket" ]] ; then
        install_tools_advanced "$bucket" "$tool_name"
        return
    fi

    chmod +x "${TOOLS_DIR}/${tool_name}"
    ln -sf "${TOOLS_DIR}/${tool_name}" "${BIN_DIR}/${tool_name}"

}

##
## dcc-tools remove <tool>
##
function tools_remove() {

    local tool="$1"

    if [[ $tool == "dcc-tools" ]] ; then
        tools_remove_self
        exit
    fi

    symlink_bin=$(command -v "$tool")

    if [[ -z $symlink_bin ]] || [[ "$symlink_bin" =~ "/usr/" ]]  ; then
        printf -- 'ERROR: %s: not found\n' "$tool"
        exit
    fi

    fullpath_bin=$(readlink "${symlink_bin}")

    if [[ -f "${fullpath_bin}-fetch" ]] ; then
        rm "${fullpath_bin}"
    fi

    rm "${BIN_DIR}/${tool}"

}

##
## dcc-tools update
##
function tools_update() {

    printf -- '%s\n' "$TOOLS_DIR"
    $git_cmd pull

}

##
## dcc-tools remove dcc-tools
##
function tool_remove_self() {

    # delete symlinks
    printf -- 'Deleting symlinks...'
    for i in $(dcc-tools list) ; do
        rm "${BIN_DIR}/$i"
    done
    printf -- 'done\n'

    # delete source folder
    printf 'Deleting dcc-tools...'
    rm -rf "$TOOLS_DIR"
    printf -- 'done\n'

    # say goodbye
    printf -- 'Farewell good fellow\n'

}

##
## dcc-tools <arg>
##
function tools_manager() {

    local mode="$1"
    local tool="$2"
    local bucket=""

    if [[ $mode == "list" ]] ; then
        tools_list

    elif [[ $mode == "update" ]] ; then
        tools_update
    fi

    if [[ -z $tool ]] ; then
        printf -- "ERROR: no tool selected\n" 1>&2
        exit
    fi

    IFS='/' read -r -a arrayTool <<< "$tool"

    is_bucket=${#arrayTool[@]}

    if [[ $is_bucket -eq 2 ]] ; then
        bucket="${arrayTool[0]}"
        tool="${arrayTool[1]}"

    elif [[ $is_bucket -eq 1 ]] ; then
        bucket="main"
        tool="${arrayTool[0]}"

    elif [[ ! -f "$TOOLS_DIR/$tool" ]] && [[ ! -f "$TOOLS_DIR/${tool}-fetch" ]] ; then
        printf -- 'ERROR: %s: unknown tool\n' "$tool" 1>&2
        exit
    fi

    if [[ $mode == "install" ]] ; then
        tools_install "${tool}" "${bucket}"

    elif [[ $mode == "remove" ]] ; then
        tools_remove "${tool}" "${bucket}"
    fi

}

###
### BUCKET
###

##
## dcc-tools bucket list
##
function bucket_list() {

    readarray -t arrayBucket < <(find "$BUCKETS_DIR" -maxdepth 1 -mindepth 1 -type d)

    for i in "${arrayBucket[@]}"; do
        printf -- "%s\n" "$(basename "$i")"
    done

}

##
## dcc-tols bucket add <bucket>
##
function bucket_add() {

    local name="$1"
    local _url="$2"

    if [[ -z $name ]] ; then
        printf -- "ERROR: no bucket name given\n" 1>&2
        exit

    elif [[ -z $_url ]] ; then
        printf -- 'ERROR: %s: no given repository' "$name"
        exit
    fi

    git clone "$_url" "${BUCKETS_DIR}/${name}"

}

##
## dcc-tools bucket remove <bucket>
##
function bucket_remove() {

    local name=$1

    if [[ -z $name ]] ; then
        printf -- 'ERROR: no bucket name given'
        return

    elif [[ -d "$BUCKETS_DIR/$name" ]] ; then
        rm -rf "${BUCKETS_DIR}/${name}"

    else
        printf -- 'ERROR: %s: not found\n' "$name"
    fi

}

##
## dcc-tools bucket <arg>...
##
function buckets_case() {

for arg in "$@"
do
    case $arg in
        list)
            shift
            bucket_list
            exit
            ;;
        add)
            shift
            bucket_add "$@"
            exit
            ;;
        remove)
            shift
            bucket_remove "$1"
            exit
            ;;
        *)
            ;;
    esac
done

}

for arg in "$@"
do
    case $arg in
        help|-h|--help)
            shift
            myhelp "$1"
            exit
            ;;
        pull)
            shift
            $git_cmd fetch
            $git_cmd pull -q
            exit
            ;;
        git)
            shift
            $git_cmd "$@"
            exit
            ;;
        install)
            shift
            tools_manager "install" "$1"
            exit
            ;;
        remove)
            shift
            tools_manager "remove" "$1"
            exit
            ;;
        list)
            shift
            tools_manager "list"
            exit
            ;;
        bucket)
            shift
            buckets_case "$@"
            exit
            ;;
        update)
            shift
            tools_manager "update"
            exit
            ;;
        *)
            ;;
    esac
done
